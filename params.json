{"name":"Mustache-wax","tagline":"Wax is an extension for Mustache.js, it enables the use of formatters inside of Mustache expressions","body":"Mustache-Wax\r\n============\r\n\r\nWax is an extension for Mustache.js, it enables the use of formatters inside of Mustache expressions in a similar fasion of Angular filters.\r\n\r\nThis extension requires that **String.prototype.trim()** method exists, you can grab a Polyfill from \r\n[MDN site](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/Trim):\r\n\r\nQuick example\r\n=============\r\n\r\nFirst you need to define some filters:\r\n```javascript\r\n\tMustache.Formatters = {\r\n\t\t\"uppercase\": function (str) {\r\n\t\t\treturn str.toUpperCase();\r\n\t\t},\r\n\t\t\"lpad\": function (str, num, sep) {\r\n\t\t\tsep = sep || \" \";\r\n\t\t\tstr = \"\" + str;\r\n\t\t\tvar filler = \"\";\r\n\t\t\twhile ((filler.length + str.length) < num) { filler += sep };\r\n\t\t\treturn (filler + str).slice(-num);\r\n\t\t},\r\n\t\t\"date\": function (dt) {\r\n\t\t\tvar lpad  = Mustache.Formatters.lpad, \r\n\t\t\t\tday   = lpad(dt.getDate(), 2, \"0\"),\r\n\t\t\t\tmonth = lpad(dt.getMonth()+1, 2, \"0\");\r\n\t\t\treturn  day + \"/\" + month + \"/\" + dt.getFullYear();\r\n\t\t}\r\n\t};\r\n```\r\n\r\nThen create a template and pass some data to render:\r\n```javascript\r\n\tMustache.render(\r\n\t\t\"{{ name | uppercase }}, {{ dob | date }}, {{ ssnum | lpad : 10 : '0' }}\", \r\n\t\t{\r\n\t\t\tname: \t\"john doe\",\r\n\t\t\tdob: \tnew Date(1981, 2, 24),\r\n\t\t\tssnum:  12345\r\n\t\t}\r\n\t);\r\n```\r\n\r\nResult:\r\n```\r\n\tJOHN DOE, 24/03/1981, 0000012345\r\n```\r\n\r\n\r\nA formatter is a function that modifies the value of an expression for display to the user. \r\nThey are used in templates and it is easy to define your own formatters.\r\n\r\nUsing formatters in templates\r\n=============================\r\n\r\nFormatters can be applied to expressions in templates using the following syntax:\r\n```\r\n{{ expression | formatter }}\r\n```\r\n\r\nFormatters can be applied to the result of another formatter. This is called \"chaining\" and uses the following syntax:\r\n```\r\n{{ expression | formatter1 | formatter2 | ... }}\r\n```\r\n\r\nFormatters may have arguments. The syntax for this is\r\n```\r\n{{ expression | formatter : argument1 : argument2 : ... }}\r\n```\r\n\r\nArguments can be either an integer, a real, a string or another expression.\r\nInteger arguments example: \r\n* 123 \r\n* -123 \r\n* +123\r\n\r\nReal arguments example:\t\r\n* 1.2\r\n* 0.1\r\n* .1\r\n* -1.2\r\n* -.1\r\n\r\nString arguments example:\r\n* \"Hello World\"\r\n* 'Hello World'\r\n* 'Hello \"World\"'\r\n* \"Hello 'World'\"\r\n\r\nChaining formatters and passing arguments\r\n=========================================\r\nFor example, assuming we have the following formatter and data:\r\n\r\n```javascript\r\n\tMustache.Formatters = {\r\n\t\t\"add\": function (one, two) {\r\n\t\t\treturn one + two;\r\n\t\t}\r\n\t}\r\n\r\n\tvar data = {\r\n\t\tten:  \t10,\r\n\t\ttwenty: 20\r\n\t};\r\n```\r\n\r\nWe could use the following templates\r\n```\r\n\t{{ ten | add: 5}}\r\n\t{{ twenty | add: 5.25 | add:-.25 }}\r\n\t{{ ten | add : 3.14159 | add : twenty | add:-3}}\r\n```\r\n\r\nThe result will be:\r\n```\r\n\t15\r\n\t25\r\n\t30.14159\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}